# # A list of extra configuration files to include. IMPORTANT: Most configurations doesn't seem to work in external files, so leave them here.
include:
  # Secret strings (REDACTED) like usernames and passwords. This file should be in .gitignore.
  - secrets.yaml

plugins:
  # Data sources
  - discogs
  #  - spotify
  - bandcamp
  - deezer

  - originquery
  - fromfilename
  - fetchart
  - embedart
  - extrafiles
  - acousticbrainz
  - chroma
  - mbsync
  - hook
  - unimported
  - zero
  - lastgenre
  - describe
  - yearfixer
  - missing

threaded: yes
verbose: no

# NOTE: This assumes that the music directory is mounted here
directory: /music
library: /music/beets.db
asciify_paths: true

# Pointing beets to the file where we keep the list of directories
# we've already imported.
statefile: /volume/state.pickle

import:
  write: yes
  duplicate_action: keep
  autotag: yes
  resume: yes

  # Setting this to no in the configuration so that it's possible to run
  # 'beet import' without quiet on the running process. However, the script that runs continuously
  # calls 'beet import -q'
  quiet: no
  quiet_fallback: skip

  # We set this to incremental so that we don't try to import files that we've already imported
  incremental: yes
  # Tells beets to attempt to import folders that we previously skipped
  incremental_skip_later: yes

  # These fields only affect interactive (i.e not quiet) mode
  default_action: apply
  none_rec_action: ask

  move: no
  copy: yes
  log: /volume/log.txt

max_filename_length: 255
art_filename: cover

musicbrainz:
  # NOTE: These 'extra_tags' assist the musicbrainz matching process, but don't change the tags that are
  # added inside the beets database
  extra_tags:
    - year
    - catalognum,
    - country,
    - label,
    - media

# Remove the "comments" tag (torrents sometimes include unnecessary info there)
zero:
  fields: comments

# Gives beets access to additional info and "hints" that come from the origin.yaml
# The origin.yaml is downloaded alongside the album from the tracker
originquery:
  use_origin_on_conflict: yes
  origin_file: origin.yaml
  tag_patterns:
    media: "$.Media"
    year: '$."Edition year"'
    label: '$."Record label"'
    catalognum: '$."Catalog number"'
    # NOTE: The 'albumdisambig' field is critically important to disambiguation very similar releases
    # (such as Kanye's multiple TLOP releases, deluxe editions, etc)
    albumdisambig: "$.Edition"
    original_year: '$."Original year"'

# Removing characters that could cause issues on filesystem or on S3
replace:
  '[\\/]': _
  '^\.': _
  '[\x00-\x1f]': _
  '[<>:"\?\*\|]': _
  '\.$': _
  '\s+$': ""
  '^\s+': ""
  "^-": _
  '[\[\{]': (
  '[\]\}]': )
  '[\^\%\`\~#]': _

extrafiles:
  patterns:
    artworkdir:
      - "[sS]cans/"
      - "[aA]rtwork/"
    paths:
      artworkdir: $albumpath/artwork
    all:
      - "*.jpg"
      - "*.png"
      - "*.jpeg"
      - "*.pdf"
      - "*.cue"
      - "*.log"
      - "origin.yaml"

clutter:
  [
    "Thumbs.DB",
    ".DS_Store",
    "**.zip",
    "**.torrent",
    "**.ini",
    "**.txt",
    "**.nfo",
    "**.m3u",
  ]

# NOTE: This can tell the user from the CLI which albums are missing songs
missing:
  format: $albumartist - $album - $title

match:
  strong_rec_thresh: 0.12 # Automatically confirm matches whose tags have greater then 88% match.
  max_rec:
    missing_tracks: medium
    unmatched_tracks: medium

# Refer to the README for more details on the release group disambiguation process
aunique:
  keys: albumartist album
  disambiguators: albumtype releasegroupdisambig albumdisambig label catalognum
  bracket: "()"

paths:
  default: $albumartist/$album%aunique{}/$track $title
  # NOTE: I think the commented out singleton configuration is better, but this needs to be
  # fully tested before it's turned on. We don't want to lose playlist entries when shifting a lot of hard-to-identify singles.
  # singleton: $artist/Non-Album/$title
  singleton: Non-Album/$artist/$title
  comp: Compilations/$album%aunique{}/$track $title

discogs:
  source_weight: 0.0
  extra_tags: [year]

# TOOD: Figure out where to put the spotify token.
# Right now it's just placed manually in the shared volume in this directory.
spotify:
  source_weight: 0.7

deezer:
  source_weight: 0.7

# NOTE: Bandcamp search works by simply iterating through a list of albums that are returned
# from a query for the album name. This could be quite a slow process, depending on the 'search_max'.
# Further, the bandcamp search might not work if the album name is common (i.e. won't show up in first X results)
bandcamp:
  source_weight: 0.7
  include_digital_only_tracks: true
  search_max: 10
  art: yes

importadded:
  preserve_mtimes: yes # After importing files, do not re-set their mtimes to their original value. Default: no.
  preserve_write_mtimes: yes # After writing files, do not re-set their mtimes to their original value. Default: no.

fetchart:
  auto: yes # Enable automatic album art fetching during import.
  cautious: no # Pick only trusted album art by ignoring filenames that do not contain one of the keywords in "cover_names".
  enforce_ratio: yes # Only allow images with 1:1 aspect ratio
  minwidth: 500 # Only images with a width bigger or equal to minwidth are considered as valid album art candidates.
  maxwidth:
    3000 # A maximum image width to downscale fetched images if they are too big.
    # The height is recomputed so that the aspect ratio is preserved.
  sources: # An asterisk * expands to all available sources.
    - filesystem # No remote art sources are queried if local art is found in the filesystem.
    - coverart
    - albumart
    - bandcamp
    - fanarttv
    - itunes
    - amazon
    - wikipedia
  store_source: yes # Store the art source (e.g. filesystem) in the beets database as art_source.

# We want to enable this plugin so that we can use its 'extractart' and 'clearart' features,
# but we don't want to automatically embed album art because it increases the size of EACH song on an album (it's duplicative)
embedart:
  auto: no

chroma:
  auto: yes

check:
  import: yes # Add checksums for new files during the import process. # This also disables integrity checks on import and will not ask you to skip the import of corrupted files.
  write-check: yes # Verify checksums before writing files with beet write or beet modify.
  write-update: yes # Update checksums after writing files with beet write or beet modify.
  convert-update: no # Update the checksum if a file has been converted with the --keep-new flag.
  threads: 2 # Threads to compute checksums.

absubmit: # The absubmit plugin lets you submit acoustic analysis results to the AcousticBrainz server.
  auto: yes # Analyze every file on import. Otherwise, you need to use the beet absubmit command explicitly. Default: no
  force: no # Analyze items and submit of AcousticBrainz data even for tracks that already have it. Default: no.
  pretend: no # Do not analyze and submit of AcousticBrainz data but print out the items which would be processed. Default: no.

acousticbrainz: # The acousticbrainz plugin gets acoustic-analysis information from the AcousticBrainz project.
  auto: yes # Enable AcousticBrainz during beet import. Default: yes.
  force: yes # Download AcousticBrainz data even for tracks that already have it. Default: no.

lastgenre: # Fetches tags from Last.fm and assigns them as genres to your albums and items.
  auto: yes # Fetch genres automatically during import. Default: yes.
  canonical: yes # Setting this to yes will use a built-in tree.
  whitelist: yes # Use the internal whitelist
  count: 1 # Number of genres to fetch. Default: 1
  fallback: "" # No fallback
  force: yes # By default, beets will always fetch new genres, even if the files already have one.
  min_weight: 10 # Minimum popularity factor below which genres are discarded. Default: 10.
  prefer_specific: no # Sort genres by the most to least specific, rather than most to least popular. Default: no.
  source: track # Which entity to look up in Last.fm. Can be either artist, album or track. Default: album.
  title_case: yes # Convert the new tags to TitleCase before saving. Default: yes.

# To provide better logs:
hook:
  hooks:
    - event: album_imported
      command: echo "\"{album}\""
    - event: import
      command: echo "Imported from {paths}"
    - event: art_set
      command: echo "Coverart saved"
    - event: import_begin
      command: echo "Import started..."
    - event: import_task_apply
      command: echo "Metadata applied"
    - event: item_copied
      command: echo "\"{item}\" copied from \"{source}\" to \"{destination}\""
    - event: item_moved
      command: echo "Moved \"{item}\""
    - event: write
      command: echo "Writing to {path}"
    - event: cli_exit
      command: echo "All tasks finished!"
