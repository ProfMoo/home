---
# Create a CronJob that exports restic metrics to a format Prometheus can scrape
apiVersion: batch/v1
kind: CronJob
metadata:
  name: volsync-metrics-exporter
  namespace: media
spec:
  schedule: "*/15 * * * *" # Every 15 minutes
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: metrics-exporter
              image: docker.io/restic/restic:latest
              command: ["/bin/sh"]
              args:
                - -c
                - |
                  #!/bin/sh

                  # Create metrics directory
                  mkdir -p /metrics

                  # Generate Prometheus metrics
                  echo "# HELP volsync_snapshots_total Total number of snapshots per repository" > /metrics/volsync.prom
                  echo "# TYPE volsync_snapshots_total counter" >> /metrics/volsync.prom
                  echo "# HELP volsync_repository_size_bytes Repository size in bytes" >> /metrics/volsync.prom
                  echo "# TYPE volsync_repository_size_bytes gauge" >> /metrics/volsync.prom
                  echo "# HELP volsync_last_backup_timestamp Last successful backup timestamp" >> /metrics/volsync.prom
                  echo "# TYPE volsync_last_backup_timestamp gauge" >> /metrics/volsync.prom

                  # Process each app
                  for secret in $(kubectl -n media get secrets -o name | grep volsync-secret | grep -v r2); do
                    app=$(echo $secret | sed 's/secret\///g' | sed 's/-volsync-secret//g')

                    echo "Processing app: $app"

                    # Get credentials
                    RESTIC_PASSWORD=$(kubectl -n media get secret ${app}-volsync-secret -o jsonpath='{.data.RESTIC_PASSWORD}' | base64 -d)
                    RESTIC_REPOSITORY="/repository/$app"

                    export RESTIC_PASSWORD RESTIC_REPOSITORY

                    # Count snapshots
                    snapshot_count=$(restic snapshots --json 2>/dev/null | jq '. | length' 2>/dev/null || echo "0")
                    echo "volsync_snapshots_total{app=\"$app\",repository=\"local\"} $snapshot_count" >> /metrics/volsync.prom

                    # Get repository stats
                    if stats=$(restic stats --json 2>/dev/null); then
                      size=$(echo "$stats" | jq '.total_size' 2>/dev/null || echo "0")
                      echo "volsync_repository_size_bytes{app=\"$app\",repository=\"local\"} $size" >> /metrics/volsync.prom
                    fi

                    # Get last backup time
                    if last_snapshot=$(restic snapshots --json 2>/dev/null | jq -r '.[0].time' 2>/dev/null); then
                      timestamp=$(date -d "$last_snapshot" +%s 2>/dev/null || echo "0")
                      echo "volsync_last_backup_timestamp{app=\"$app\",repository=\"local\"} $timestamp" >> /metrics/volsync.prom
                    fi
                  done

                  # Copy to shared volume for pickup by metrics server
                  cp /metrics/volsync.prom /shared-metrics/

                  echo "Metrics exported successfully"
              volumeMounts:
                - name: repository
                  mountPath: /repository
                - name: shared-metrics
                  mountPath: /shared-metrics
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 500m
                  memory: 512Mi
          volumes:
            - name: repository
              nfs:
                server: 192.168.8.248
                path: /mnt/vault/volsync
            - name: shared-metrics
              emptyDir: {}
          restartPolicy: OnFailure
          serviceAccountName: default
---
# Simple metrics HTTP server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: volsync-metrics-server
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: volsync-metrics-server
  template:
    metadata:
      labels:
        app: volsync-metrics-server
    spec:
      containers:
        - name: metrics-server
          image: docker.io/library/nginx:alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - name: shared-metrics
              mountPath: /usr/share/nginx/html
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
            limits:
              cpu: 100m
              memory: 128Mi
      volumes:
        - name: shared-metrics
          emptyDir: {}
        - name: nginx-config
          configMap:
            name: volsync-metrics-nginx
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: volsync-metrics-nginx
  namespace: media
data:
  default.conf: |
    server {
        listen 80;
        location /metrics {
            alias /usr/share/nginx/html/volsync.prom;
            add_header Content-Type text/plain;
        }
        location / {
            return 200 "VolSync Metrics Server\n/metrics - Prometheus metrics\n";
            add_header Content-Type text/plain;
        }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: volsync-metrics
  namespace: media
  labels:
    app: volsync-metrics-server
spec:
  selector:
    app: volsync-metrics-server
  ports:
    - port: 80
      targetPort: 80
      name: http
