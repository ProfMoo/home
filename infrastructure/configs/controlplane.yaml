---
# TODO: Add critical cluster components to the highest priority class
version: v1alpha1
debug: false
persist: true
machine:
  type: ${node_type}
  # The `token` is used by a machine to join the PKI of the cluster.
  token: ${token}
  # The root certificate authority of the PKI.
  ca:
    crt: ${client_ca_crt}
    key: ${client_key}
  nodeLabels:
%{ for key, value in kubernetes_node_labels ~}
    ${key}: ${value}
%{ endfor ~}
  certSANs:
    - ${ipv4_address}/24
    - "kubernetes.default.svc.cluster.local"
    - 127.0.0.1
    - ${talos_virtual_ip}
  kubelet:
    image: ghcr.io/siderolabs/kubelet:v1.33.4
    defaultRuntimeSeccompProfileEnabled: true
    disableManifestsDirectory: true
    extraArgs:
      rotate-server-certificates: true
      # Conservative resource reservations for production stability
      system-reserved: "cpu=250m,memory=512Mi,ephemeral-storage=1Gi"
      kube-reserved: "cpu=500m,memory=1Gi,ephemeral-storage=1Gi"
      eviction-hard: "memory.available<512Mi,nodefs.available<10%"
      eviction-soft: "memory.available<1Gi,nodefs.available<15%"
      eviction-soft-grace-period: "memory.available=2m,nodefs.available=2m"
  network:
    hostname: ${hostname}
    nameservers:
      - 8.8.8.8
      - 1.1.1.1
    interfaces:
      - addresses:
          - ${ipv4_address}/24
        routes:
          - network: 0.0.0.0/0
            gateway: ${subnet_gateway}
        vip:
          ip: ${talos_virtual_ip}
        deviceSelector:
          hardwareAddr: '${mac_address}'
  features:
    rbac: true
    stableHostname: true
    apidCheckExtKeyUsage: true
    diskQuotaSupport: true
    # https://www.talos.dev/v1.9/talos-guides/network/host-dns/
    hostDNS:
      enabled: true
      resolveMemberNames: true
      forwardKubeDNSToHost: false
    kubePrism:
      enabled: true
      port: 7445
    kubernetesTalosAPIAccess:
      enabled: true
      allowedRoles:
        - os:admin
      allowedKubernetesNamespaces:
        - system-upgrade
  # logging:
  #   destinations:
  #     - name: loki
  #       endpoint: http://loki.observability.svc.cluster.local:3100/loki/api/v1/push
  #       format: json_lines
  #   rules:
  #     - match:
  #         - kernel
  #         - service[*]
  #         - containerd
  #         - etcd
  #         - kubelet
  #         - talos:machined
  #         - talos:trustd
  #         - talos:apid
  #       destinations:
  #         - loki
  install:
    # Docs: https://www.talos.dev/v1.9/learn-more/image-factory/
    # Adjust this image to either 1. install new extensions and/or 2. upgrade Talos
    # 1. Go to https://factory.talos.dev/ and generate a new path
    # 2. Pass in a different 'talos_version'
    image: factory.talos.dev/installer/dc7b152cb3ea99b821fcb7340ce7168313ce393d663740b791c36f6e95fc8586:v1.10.6
    disk: /dev/sda # The disk used for installations.
    wipe: false # Indicates if the installation disk should be wiped at installation time.
  files:
    - op: overwrite
      path: /etc/nfsmount.conf
      permissions: 0o644
      content: |
        [ NFSMount_Global_Options ]
        nfsvers=4.2
        hard=True
        nconnect=16
        noatime=True
cluster:
  clusterName: homelab
  id: ${cluster_id} # Globally unique identifier for this cluster (base64 encoded random 32 bytes).
  secret: ${cluster_secret} # Shared secret of cluster (base64 encoded random 32 bytes).
  # NOTE: This is needed to join the cluster
  # The [bootstrap token](https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/) used to join the cluster.
  token: ${cluster_token}
  # A key used for the [encryption of secret data at rest](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/).
  secretboxEncryptionSecret: ${secretbox_encryption_secret}
  coreDNS:
    disabled: true
  network:
    # The CNI used.
    cni:
      name: none # Name of CNI to use.
    dnsDomain: cluster.local # The domain used by Kubernetes DNS.
    # The pod subnet CIDR.
    podSubnets: ${format("%#v",split(",",pod_subnets))}
    serviceSubnets: ${format("%#v",split(",",service_subnets))}
  ca:
    crt: ${cluster_ca_crt}
    key: ${cluster_ca_key}
  # The base64 encoded aggregator certificate authority used by Kubernetes for front-proxy certificate generation.
  aggregatorCA:
    crt: ${aggregator_ca_crt}
    key: ${aggregator_ca_key}
  # The base64 encoded private key for service account token generation.
  serviceAccount:
    key: ${service_account_key}
  controlPlane:
    endpoint: https://${talos_virtual_ip}:6443
  apiServer:
    image: registry.k8s.io/kube-apiserver:v1.33.4
    certSANs:
      - ${ipv4_address}
    disablePodSecurityPolicy: true
    extraArgs:
      feature-gates: MutatingAdmissionPolicy=true
      runtime-config: admissionregistration.k8s.io/v1alpha1=true
    admissionControl:
      - name: PodSecurity
        configuration:
          apiVersion: pod-security.admission.config.k8s.io/v1alpha1
          defaults:
            audit: restricted
            audit-version: latest
            enforce: baseline
            enforce-version: latest
            warn: restricted
            warn-version: latest
          exemptions:
            namespaces:
              - kube-system
            runtimeClasses: []
            usernames: []
          kind: PodSecurityConfiguration
    auditPolicy:
      apiVersion: audit.k8s.io/v1
      kind: Policy
      rules:
        - level: Metadata
    resources:
      requests:
        cpu: 250m
        memory: 512Mi
      # No limits - critical component should not be throttled
  proxy:
    image: registry.k8s.io/kube-proxy:v1.33.4
    # Using Cilium as the proxy, so disabling kube-proxy
    disabled: true
  etcd:
    ca:
      crt: ${etcd_ca_crt}
      key: ${etcd_ca_key}
    extraArgs:
      listen-metrics-urls: http://0.0.0.0:2381
  controllerManager:
    image: registry.k8s.io/kube-controller-manager:v1.33.4
    extraArgs:
      # NOTE: Kubernetes manifests controlled by Talos require a special application process compared to most machine-config changes.
      # Source: https://github.com/siderolabs/talos/discussions/7835
      bind-address: 0.0.0.0
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      # No limits - critical component should not be throttled
  discovery:
    enabled: true
  scheduler:
    image: registry.k8s.io/kube-scheduler:v1.33.4
    extraArgs:
      # NOTE: This enables Prometheus to scrape metrics from the control plane nodes
      bind-address: 0.0.0.0
    resources:
      requests:
        cpu: 250m
        memory: 512Mi
      # No limits - critical component should not be throttled
  inlineManifests:
    - name: cilium
      contents: |-
        apiVersion: v1
        kind: Namespace
        metadata:
            name: cilium
            annotations:
              kustomize.toolkit.fluxcd.io/prune: disabled
            labels:
              pod-security.kubernetes.io/enforce: "privileged"
