---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: cilium
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: cilium
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: cilium
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: cilium
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: cilium
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUtnaldwdkdTUjlucUFBNHdLdE01cUl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURJeU5URTFNekl3TVZvWERUSTNNREl5TkRFMQpNekl3TVZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEzbTNmWlhiWlNWci83a0YxT0hHNlJWekhIWFdmNXdsYjFTVWFjemdiSzllZE9PUnoKd2tXaDlnUkxKbkcwTE9pT0pUNFFUczdkcGZLRm03NnB1MG85aUVsOXVhV1VTbHQwakFvS3hRRXZPeUtSTmhqagpyUFJtL3drOWtLOXBzSkVuUElISDlJSWw2Z1FqbmJsRWdLZWQ0T0lRR0gxR2Q4OWFLTDJjQi9kUjRpdlkvcWhEClZWcXBHeEJGbWw1N21oa2U0WEd6SEloN3llYytUbTNoRkNMa3BZUFFIVnRvY29pZ2RVRVVvejJldzR1REFlK3cKRkZMS3VvUm5GVW1ENXg0c0dxWlR4ckp3eHN4K1NXTEdDN2ZvNDZGODFkZHZYK0xLSVlzbnZFVjUvQ0F3SzBUOApBRk9NaUFrT1c5ZkxLV3JwM1ZONVBtT0VyYnQ4QTFRQXJ2RlArd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGS0IzaVFJUXZNSGtUMlMwUWozdUtwNmpZV2huTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRREVrUlJkM2R0ZlI5WmoxeFlJL2pKVUV0d2tsN1ZpTGtocFd2Um1JT0lscEFMaXY2cXF1YVlUCkgvWE1sa2xRcWZYaUxUK0x5SnJJUEpnaTZ5cjd6YXpMVnRuMVB2aXkwR0dQU2NhcW5kbk11VmhwSzdKN2RuNGoKVCtIOUFRL0x2QlEyTnozMVZpb09mNm5ER0RLRzExSk1hOUNKRVZxMlZpUGs2aWtGeCtFVjY0U3FmaUNyc2JaTgpnYnE5dVhPcHRsQkIwaHRpWHhaUDltTFhIbkZuZGlQVkhZeXF6Ym5CT0hOZjNiNTVMZktjM2phbG1BeGt6OEI0Cms2MzhTUm5GamI4UWVGRWNNclRGWlZ4ODdCbTlOTnJyWG01Q3V4dVFzaEo1M2dZckpMTkMxVjNIM0g3Qm4vUnYKZCtSbUFOajJZbi9DUisyRzVyLzhHNmlLQUhqczZ5bWgKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBM20zZlpYYlpTVnIvN2tGMU9IRzZSVnpISFhXZjV3bGIxU1VhY3pnYks5ZWRPT1J6CndrV2g5Z1JMSm5HMExPaU9KVDRRVHM3ZHBmS0ZtNzZwdTBvOWlFbDl1YVdVU2x0MGpBb0t4UUV2T3lLUk5oamoKclBSbS93azlrSzlwc0pFblBJSEg5SUlsNmdRam5ibEVnS2VkNE9JUUdIMUdkODlhS0wyY0IvZFI0aXZZL3FoRApWVnFwR3hCRm1sNTdtaGtlNFhHekhJaDd5ZWMrVG0zaEZDTGtwWVBRSFZ0b2NvaWdkVUVVb3oyZXc0dURBZSt3CkZGTEt1b1JuRlVtRDV4NHNHcVpUeHJKd3hzeCtTV0xHQzdmbzQ2RjgxZGR2WCtMS0lZc252RVY1L0NBd0swVDgKQUZPTWlBa09XOWZMS1dycDNWTjVQbU9FcmJ0OEExUUFydkZQK3dJREFRQUJBb0lCQUhUWDdPR0ZGRkczanZnZQp4TEFZOWd2WDEvVSt3L2YrNzVIQlF1ckJ6Mnd4Z0xMUk40b1hRQ1JYVHc3cjdnVWxTUDZCWXRtelM3WVA5MlhBCk83TmFKWWJCYkYwb2dRU3FsRWU0UXI0SWlFSWRQNERXaEV0bnUrOC9jR3JmNnJwSkZmNXdBcFVNQlZTd1JmRmwKMEhseEU3dDlwWXpueWl2SDdnbTJ5UTlhT1ZhQVRYRWduZlpPLzAvVU9JRjkzVW1DRDEzOUIwMTNtNExuVGduaAp6ZFJJMklCUHpYYmNkM1hBQlhMM05YWlJybDFRTjJLVWh1TDZIbzJhY1NIOG83WjlRV1RoRmhuMldqMkRwVnltCnA5dE1oVVE4VzFpUkl0TXJZSnZmZTUxSFpjbW1zWmhPb3BEMmFUajBCMkFIVFU0cWJKeEJVL2VJU1N6RjVHWjYKZUxSSEdUa0NnWUVBN2R1UFl2WFdwbzQwVzJpRjRBcjBUQUhqd210M2pkclBNRG5oSGdTN1oxb28weHdjeGh1bAo1VXVVcTNvNm9UdE9GU2FsUDhUWVRKLytkVGU3SnR0RVZwcitmMnQ1dDEzSXJNMEk4bXlxVG9rMzd6WkxjTk5xCjltcUdaNlBmaXptUWtuZGV5WjJkbEJSSUh3TVZod0NGdE42VE5hWDV0RGNuYUNkeXBZZEpENzBDZ1lFQTcyVU4KNUkxK0x0VkNlRkJybU9FaGdERVdaMmxha1l1RkFDaWRDTHdzM1l1S2VmWlo5WW9aOXVPWGJGTHpKWVFHMzQ0UApsaWYwdXIwdnNGblVJV2FuQmtWQnhTM1dEZHkwbHFDZHdpV2dvNEJVMXUyWlpnaVltMDJxRHBkOHQxVGVYbjhiCjhnSHFrR3RpNGJWb0hBSlpXREUwZFN3Z3lZd1pDRXNLMlFUWDNoY0NnWUFTbHZCVDZhYkhDYUlwNnJkYjFUOVcKbVdjMWtMU2RUNWFWekZBOXlsempMUGEzMlNDZWt4YWFIeGdWZHM0U1A5SlFjTjdGWnhzSWtoQ1BGTFg1eVhWRAoxNFZBYkNQdEl0VkdQQmdRNmxFOUpoaExCOUZKbGh4citkTmJVa0ZzWGlsZ2FSZnRaZllrMXBqMFk0ZFJMOGREClpZblh6WXNBZkxjRnV0K0k5RlBQZVFLQmdCM3ZVZnhwWVFUMEw5cWhtOExETEJBK2t5R2RQL0VCTkVGZjByc2IKNUxSVFZaNkltcGtraXJpZm52aXhxcXZmUllqQTE5d2I1UE5RNHR5M2J0bzZYdHBlNEttS1lNRGMvMHZ5aTZlUwpVdkwvQWh6YUd4dHlLYnNKekNFRStsaG1hV1FCbXZuNUdWNnp2dXFnWjROUkcrRDJUaXYwdDZqY051a2RrUjZ3CkIxcERBb0dCQU1aMTZ5Tm9IVTBXTGY1b3ZPMy80VUViK2pVd0xXdFJnUVEwNlM5U2ZSVzl5Zm1Kbmd4OUhWWEQKS3BNYmdsZmMrcmQ0WlM0N2lFK2pKcFJpcXJjMGdQeGQ1SkljZGtwQWVkM21Wc2RXSE1sZ1YyOG5uRWQwV0NBMAppL3EyRGtaNmF6WTkxUWFCZG5yL1lneFNXODljSnZ0UFdMUkw5eE43TktKQXlWOCtIekRSCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-ca-secret
  namespace: cilium
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUtnaldwdkdTUjlucUFBNHdLdE01cUl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURJeU5URTFNekl3TVZvWERUSTNNREl5TkRFMQpNekl3TVZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEzbTNmWlhiWlNWci83a0YxT0hHNlJWekhIWFdmNXdsYjFTVWFjemdiSzllZE9PUnoKd2tXaDlnUkxKbkcwTE9pT0pUNFFUczdkcGZLRm03NnB1MG85aUVsOXVhV1VTbHQwakFvS3hRRXZPeUtSTmhqagpyUFJtL3drOWtLOXBzSkVuUElISDlJSWw2Z1FqbmJsRWdLZWQ0T0lRR0gxR2Q4OWFLTDJjQi9kUjRpdlkvcWhEClZWcXBHeEJGbWw1N21oa2U0WEd6SEloN3llYytUbTNoRkNMa3BZUFFIVnRvY29pZ2RVRVVvejJldzR1REFlK3cKRkZMS3VvUm5GVW1ENXg0c0dxWlR4ckp3eHN4K1NXTEdDN2ZvNDZGODFkZHZYK0xLSVlzbnZFVjUvQ0F3SzBUOApBRk9NaUFrT1c5ZkxLV3JwM1ZONVBtT0VyYnQ4QTFRQXJ2RlArd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGS0IzaVFJUXZNSGtUMlMwUWozdUtwNmpZV2huTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRREVrUlJkM2R0ZlI5WmoxeFlJL2pKVUV0d2tsN1ZpTGtocFd2Um1JT0lscEFMaXY2cXF1YVlUCkgvWE1sa2xRcWZYaUxUK0x5SnJJUEpnaTZ5cjd6YXpMVnRuMVB2aXkwR0dQU2NhcW5kbk11VmhwSzdKN2RuNGoKVCtIOUFRL0x2QlEyTnozMVZpb09mNm5ER0RLRzExSk1hOUNKRVZxMlZpUGs2aWtGeCtFVjY0U3FmaUNyc2JaTgpnYnE5dVhPcHRsQkIwaHRpWHhaUDltTFhIbkZuZGlQVkhZeXF6Ym5CT0hOZjNiNTVMZktjM2phbG1BeGt6OEI0Cms2MzhTUm5GamI4UWVGRWNNclRGWlZ4ODdCbTlOTnJyWG01Q3V4dVFzaEo1M2dZckpMTkMxVjNIM0g3Qm4vUnYKZCtSbUFOajJZbi9DUisyRzVyLzhHNmlLQUhqczZ5bWgKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBM20zZlpYYlpTVnIvN2tGMU9IRzZSVnpISFhXZjV3bGIxU1VhY3pnYks5ZWRPT1J6CndrV2g5Z1JMSm5HMExPaU9KVDRRVHM3ZHBmS0ZtNzZwdTBvOWlFbDl1YVdVU2x0MGpBb0t4UUV2T3lLUk5oamoKclBSbS93azlrSzlwc0pFblBJSEg5SUlsNmdRam5ibEVnS2VkNE9JUUdIMUdkODlhS0wyY0IvZFI0aXZZL3FoRApWVnFwR3hCRm1sNTdtaGtlNFhHekhJaDd5ZWMrVG0zaEZDTGtwWVBRSFZ0b2NvaWdkVUVVb3oyZXc0dURBZSt3CkZGTEt1b1JuRlVtRDV4NHNHcVpUeHJKd3hzeCtTV0xHQzdmbzQ2RjgxZGR2WCtMS0lZc252RVY1L0NBd0swVDgKQUZPTWlBa09XOWZMS1dycDNWTjVQbU9FcmJ0OEExUUFydkZQK3dJREFRQUJBb0lCQUhUWDdPR0ZGRkczanZnZQp4TEFZOWd2WDEvVSt3L2YrNzVIQlF1ckJ6Mnd4Z0xMUk40b1hRQ1JYVHc3cjdnVWxTUDZCWXRtelM3WVA5MlhBCk83TmFKWWJCYkYwb2dRU3FsRWU0UXI0SWlFSWRQNERXaEV0bnUrOC9jR3JmNnJwSkZmNXdBcFVNQlZTd1JmRmwKMEhseEU3dDlwWXpueWl2SDdnbTJ5UTlhT1ZhQVRYRWduZlpPLzAvVU9JRjkzVW1DRDEzOUIwMTNtNExuVGduaAp6ZFJJMklCUHpYYmNkM1hBQlhMM05YWlJybDFRTjJLVWh1TDZIbzJhY1NIOG83WjlRV1RoRmhuMldqMkRwVnltCnA5dE1oVVE4VzFpUkl0TXJZSnZmZTUxSFpjbW1zWmhPb3BEMmFUajBCMkFIVFU0cWJKeEJVL2VJU1N6RjVHWjYKZUxSSEdUa0NnWUVBN2R1UFl2WFdwbzQwVzJpRjRBcjBUQUhqd210M2pkclBNRG5oSGdTN1oxb28weHdjeGh1bAo1VXVVcTNvNm9UdE9GU2FsUDhUWVRKLytkVGU3SnR0RVZwcitmMnQ1dDEzSXJNMEk4bXlxVG9rMzd6WkxjTk5xCjltcUdaNlBmaXptUWtuZGV5WjJkbEJSSUh3TVZod0NGdE42VE5hWDV0RGNuYUNkeXBZZEpENzBDZ1lFQTcyVU4KNUkxK0x0VkNlRkJybU9FaGdERVdaMmxha1l1RkFDaWRDTHdzM1l1S2VmWlo5WW9aOXVPWGJGTHpKWVFHMzQ0UApsaWYwdXIwdnNGblVJV2FuQmtWQnhTM1dEZHkwbHFDZHdpV2dvNEJVMXUyWlpnaVltMDJxRHBkOHQxVGVYbjhiCjhnSHFrR3RpNGJWb0hBSlpXREUwZFN3Z3lZd1pDRXNLMlFUWDNoY0NnWUFTbHZCVDZhYkhDYUlwNnJkYjFUOVcKbVdjMWtMU2RUNWFWekZBOXlsempMUGEzMlNDZWt4YWFIeGdWZHM0U1A5SlFjTjdGWnhzSWtoQ1BGTFg1eVhWRAoxNFZBYkNQdEl0VkdQQmdRNmxFOUpoaExCOUZKbGh4citkTmJVa0ZzWGlsZ2FSZnRaZllrMXBqMFk0ZFJMOGREClpZblh6WXNBZkxjRnV0K0k5RlBQZVFLQmdCM3ZVZnhwWVFUMEw5cWhtOExETEJBK2t5R2RQL0VCTkVGZjByc2IKNUxSVFZaNkltcGtraXJpZm52aXhxcXZmUllqQTE5d2I1UE5RNHR5M2J0bzZYdHBlNEttS1lNRGMvMHZ5aTZlUwpVdkwvQWh6YUd4dHlLYnNKekNFRStsaG1hV1FCbXZuNUdWNnp2dXFnWjROUkcrRDJUaXYwdDZqY051a2RrUjZ3CkIxcERBb0dCQU1aMTZ5Tm9IVTBXTGY1b3ZPMy80VUViK2pVd0xXdFJnUVEwNlM5U2ZSVzl5Zm1Kbmd4OUhWWEQKS3BNYmdsZmMrcmQ0WlM0N2lFK2pKcFJpcXJjMGdQeGQ1SkljZGtwQWVkM21Wc2RXSE1sZ1YyOG5uRWQwV0NBMAppL3EyRGtaNmF6WTkxUWFCZG5yL1lneFNXODljSnZ0UFdMUkw5eE43TktKQXlWOCtIekRSCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: cilium
type: kubernetes.io/tls
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUtnaldwdkdTUjlucUFBNHdLdE01cUl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURJeU5URTFNekl3TVZvWERUSTNNREl5TkRFMQpNekl3TVZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEzbTNmWlhiWlNWci83a0YxT0hHNlJWekhIWFdmNXdsYjFTVWFjemdiSzllZE9PUnoKd2tXaDlnUkxKbkcwTE9pT0pUNFFUczdkcGZLRm03NnB1MG85aUVsOXVhV1VTbHQwakFvS3hRRXZPeUtSTmhqagpyUFJtL3drOWtLOXBzSkVuUElISDlJSWw2Z1FqbmJsRWdLZWQ0T0lRR0gxR2Q4OWFLTDJjQi9kUjRpdlkvcWhEClZWcXBHeEJGbWw1N21oa2U0WEd6SEloN3llYytUbTNoRkNMa3BZUFFIVnRvY29pZ2RVRVVvejJldzR1REFlK3cKRkZMS3VvUm5GVW1ENXg0c0dxWlR4ckp3eHN4K1NXTEdDN2ZvNDZGODFkZHZYK0xLSVlzbnZFVjUvQ0F3SzBUOApBRk9NaUFrT1c5ZkxLV3JwM1ZONVBtT0VyYnQ4QTFRQXJ2RlArd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGS0IzaVFJUXZNSGtUMlMwUWozdUtwNmpZV2huTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRREVrUlJkM2R0ZlI5WmoxeFlJL2pKVUV0d2tsN1ZpTGtocFd2Um1JT0lscEFMaXY2cXF1YVlUCkgvWE1sa2xRcWZYaUxUK0x5SnJJUEpnaTZ5cjd6YXpMVnRuMVB2aXkwR0dQU2NhcW5kbk11VmhwSzdKN2RuNGoKVCtIOUFRL0x2QlEyTnozMVZpb09mNm5ER0RLRzExSk1hOUNKRVZxMlZpUGs2aWtGeCtFVjY0U3FmaUNyc2JaTgpnYnE5dVhPcHRsQkIwaHRpWHhaUDltTFhIbkZuZGlQVkhZeXF6Ym5CT0hOZjNiNTVMZktjM2phbG1BeGt6OEI0Cms2MzhTUm5GamI4UWVGRWNNclRGWlZ4ODdCbTlOTnJyWG01Q3V4dVFzaEo1M2dZckpMTkMxVjNIM0g3Qm4vUnYKZCtSbUFOajJZbi9DUisyRzVyLzhHNmlLQUhqczZ5bWgKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTRENDQWpDZ0F3SUJBZ0lRSUpvSEtmSlljcmJUNkN6ZVcvdTZuakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TWpJMU1UVXpNakF5V2hjTk1qY3dNakkwTVRVegpNakF5V2pBak1TRXdId1lEVlFRRERCZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEQTh1OTZrOThTRTJETzJITnUxSWhYclloS2t1M3gKZlNFY3JKTWM3QTVpb2JrTDJZVnA3RzhjWHhOYlZpQ1lneWNvcUN5NUhuRnhKY25OdCs4K3VnRURhWE4xSmY3Zgo3UGhtNVJlUWQzR3pTNWUxb1QyU1FoenhmeHRhOHhta2lsUHN0dkNrUlFGV0NTTDhxZTZWaVZXL3UzSzYxUzdwCkl3THlheS93QllYUk5iWGdHSTN6UTZyeEtDajlSQm15L0h2RTZPbkdwOE1EUDNLVnNWbWlpODYvV0VMRFEvblkKUGp3RnFTb0Vqb2Y5YTd1SW9JbEpOUjhVazFBMTJLOHpOTGNBbFBpTTlaQXBYWE00a1NuclUzNEd4MTYwOGdjYQoyT1l6MXUzcUtlUnpyNGZpNVRjTHZmMTdYV2I5emRpdGpPSmlUdkd5b2I5a1VhQXMwSFpYRmsvSkFnTUJBQUdqCmdZWXdnWU13RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZLQjNpUUlRdk1Ia1QyUzBRajN1S3A2agpZV2huTUNNR0ExVWRFUVFjTUJxQ0dDb3VhSFZpWW14bExYSmxiR0Y1TG1OcGJHbDFiUzVwYnpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFqOTUvUWVmMTRpb2hhcnpHVExUZ3M5VHp2QnE3ZC9nejI0R1BiR09xZndGOTRjWXEKbWNVaDYvRHJoYWcrMTQ0NDRPK1cvdE1WSlJPaDZ2NzdpZ1N4VTNJZmVPK09ZNTJEM08rWVBuaEFuek0vdGVodQpPSGxqYSs0WnQ4VnZYMXhqcWdKa0ljSW0zcXVhanRVRy9Lc0NFVnprbDk2U3prS0FPUVBQVHM4YXRwa3lCNXVYCml1K2JqMVZBOTNEbldiVjBKelQ5a3pCVm5aNXZEUnVodlNuQjd0Z2tZU1J1T25ISEs0OUtKL2l2YzBnbFhZUVUKOE1oTGVNZUVNbnVQdmFFeXBLalVSOTl1eXd6dFN0eVp0TmFtMGRQMVl3K2tnK1BIbnNTL3V2SVpYVXJJaEw2Mgo5OStkSG1YSmVyaFpRaW9NOGw1U1ZmYU5FeHorT1VjRTgwNDdCdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBd1BMdmVwUGZFaE5nenRoemJ0U0lWNjJJU3BMdDhYMGhIS3lUSE93T1lxRzVDOW1GCmFleHZIRjhUVzFZZ21JTW5LS2dzdVI1eGNTWEp6YmZ2UHJvQkEybHpkU1grMyt6NFp1VVhrSGR4czB1WHRhRTkKa2tJYzhYOGJXdk1acElwVDdMYndwRVVCVmdraS9LbnVsWWxWdjd0eXV0VXU2U01DOG1zdjhBV0YwVFcxNEJpTgo4ME9xOFNnby9VUVpzdng3eE9qcHhxZkRBejl5bGJGWm9vdk92MWhDdzBQNTJENDhCYWtxQkk2SC9XdTdpS0NKClNUVWZGSk5RTmRpdk16UzNBSlQ0alBXUUtWMXpPSkVwNjFOK0JzZGV0UElIR3RqbU05YnQ2aW5rYzYrSDR1VTMKQzczOWUxMW0vYzNZcll6aVlrN3hzcUcvWkZHZ0xOQjJWeFpQeVFJREFRQUJBb0lCQVFDK0E0QkxXcXhuaEtYbApqY3UvN1pXSG91R0JiMGpjZExuVEh6Q1JYdmFiczJBa2gwYVhsYnVtV1FzYSs2cUdCMExkQ3lGZi9OY0M4by9XCkE3bWNNRmtuSHdZUTdDWWdKNkpJMG50dVRmS3UrMWFnQy9ZeXZ1RDZBbzdSOW0zZVdFdGw1cEw5Y3VkcDd2MkIKaldmajQ2ZUtkZkw2ZzA3N1VQdHArSnp3NXI5dDBwdXVrZ3B5Tm1KVTBSRVBsVlNNYVcvRXM1YUlYOVlOOFFUMAoyWHhSV1pnTTJPcFlsVmE3aGZOeVhJVElxeC8yOW1pcUozS3JRdk1LMi9DWG9oQW0xTXhQUnZpVjBwMjhBN01qCmdSN3dVL1VzMHdvYXNxemhGeTRaenFxbHZYWTBWWmw4RUovZExZOU4ranhSU1JDM3QxMlhkR21DT3Q1Vm1FMWcKYUNwWFZuRnhBb0dCQVBKMmpHZG1WdWluRzllMGljUTNzR0lKc09IZ1Uxc3JBdGsyMFJXeTExZVpiTXZZeXFuLwprYm9RQldEWlgybnpteitQTWNNT212cHlsWW5UNzVhVkJ1SXZ5ZWZpUUt4aHZBVzB5RDJjSExDczNlcVFFUmxKCnd0dGVOQ2NicWFQT2IxbmtwbDFWSGNxR3J2c2ZOTklnRUpLd2NRSC9BS3FzSWh3R1RGK09ia25iQW9HQkFNdTQKc2w0NVJuclF4Ukkyc2NnVFplSGJzd3REZEZtemJsUHk2Y2ZKMjB6VzN2TUgyL1JQcnRnVVkzTzVrU3Joc2dYVgpPY3RIaXQ3bzZyemRUb2Q0a3BHYk8yWFpVdytiaEYxSmNhNXhENWRLem5nN0NsOTdqVE05MjM4RzAwZTdCUkkwCmQ3TDJEWXZuTkhNRzdJbDJCTzNxb01UQjZFRVFQMzliSjFjdnVEZ3JBb0dCQUxsc0RhM1pwdWNmUFB5Mk5aRlkKWVV4b1N0eENtSnlsQlBXbXBUbHAzcU5BVXVLRnRWOVNjbGlQZmYxMTN6RUF1cDVkM05sbDV3Rlc5YU5FNy9vQgptQlVNSk9WdnNyUGh2ay9DMUV2QmduTmVrQXVkQjJhR2NUMGdDdFJKcEc4QUpVbml3Wk9venpLZDAxMTZuUU9BCndBdmVZVjM4Ykw4WkNyRFI1RUJEaFhaM0FvR0FOcHdzTkZYbUxzWUlEZm5iYm1iRXlPYTcrQ2o4NTQ3UjVHOFoKZkJVQVZIakZDeUR3TlcybTBRV21Jejk3U3FOMXRWcVRRNHJLRHpjZ3RjQWRiUE5GVndMbHlVZVluSFp6NVEzcgpDM2dEVmVzWHJlTWx4TEs2QnlKdDFIOWY0N3FlZ1dMUE00b0IxNThDMEZMcTFXNXRvOWxoZjF6N2hYVjFrQTQvClhYL05Ra0VDZ1lFQW9ta0Y5VGNMRzhFM3pBYTdybXlnZUVMSzhNRFdtaS82cVZjTUt1Z2JVYzRtV1hrcWhNdm8KQW11ZWVpV056OVdyR0tWSUM0SjZYL2xTR3BrdjRrMUNtVmk5ZTd6Tm9mWFcvRnY5YkZRNGJDMU5odDdOcEl5TgpwcGJobVc3a2ExR212SVF3emd6SkFLaXhXckhzRmNkbE9XWXh0UFFjVWJFTC95UGthSkJwWUVrPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: cilium
type: kubernetes.io/tls
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUtnaldwdkdTUjlucUFBNHdLdE01cUl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURJeU5URTFNekl3TVZvWERUSTNNREl5TkRFMQpNekl3TVZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUEzbTNmWlhiWlNWci83a0YxT0hHNlJWekhIWFdmNXdsYjFTVWFjemdiSzllZE9PUnoKd2tXaDlnUkxKbkcwTE9pT0pUNFFUczdkcGZLRm03NnB1MG85aUVsOXVhV1VTbHQwakFvS3hRRXZPeUtSTmhqagpyUFJtL3drOWtLOXBzSkVuUElISDlJSWw2Z1FqbmJsRWdLZWQ0T0lRR0gxR2Q4OWFLTDJjQi9kUjRpdlkvcWhEClZWcXBHeEJGbWw1N21oa2U0WEd6SEloN3llYytUbTNoRkNMa3BZUFFIVnRvY29pZ2RVRVVvejJldzR1REFlK3cKRkZMS3VvUm5GVW1ENXg0c0dxWlR4ckp3eHN4K1NXTEdDN2ZvNDZGODFkZHZYK0xLSVlzbnZFVjUvQ0F3SzBUOApBRk9NaUFrT1c5ZkxLV3JwM1ZONVBtT0VyYnQ4QTFRQXJ2RlArd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGS0IzaVFJUXZNSGtUMlMwUWozdUtwNmpZV2huTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRREVrUlJkM2R0ZlI5WmoxeFlJL2pKVUV0d2tsN1ZpTGtocFd2Um1JT0lscEFMaXY2cXF1YVlUCkgvWE1sa2xRcWZYaUxUK0x5SnJJUEpnaTZ5cjd6YXpMVnRuMVB2aXkwR0dQU2NhcW5kbk11VmhwSzdKN2RuNGoKVCtIOUFRL0x2QlEyTnozMVZpb09mNm5ER0RLRzExSk1hOUNKRVZxMlZpUGs2aWtGeCtFVjY0U3FmaUNyc2JaTgpnYnE5dVhPcHRsQkIwaHRpWHhaUDltTFhIbkZuZGlQVkhZeXF6Ym5CT0hOZjNiNTVMZktjM2phbG1BeGt6OEI0Cms2MzhTUm5GamI4UWVGRWNNclRGWlZ4ODdCbTlOTnJyWG01Q3V4dVFzaEo1M2dZckpMTkMxVjNIM0g3Qm4vUnYKZCtSbUFOajJZbi9DUisyRzVyLzhHNmlLQUhqczZ5bWgKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURWakNDQWo2Z0F3SUJBZ0lRQVFHMjFXTTFBbHB4azJSOWVETzJ1VEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3TWpJMU1UVXpNakF4V2hjTk1qY3dNakkwTVRVegpNakF4V2pBcU1TZ3dKZ1lEVlFRRERCOHFMbVJsWm1GMWJIUXVhSFZpWW14bExXZHljR011WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBblVrVFlOOWVha2I4elFBUlhsblQKeS80VVUraEtscW5qRnJvNDB2SlpIVjB2QjlVVlQzeEVGWG9abmlKVkhGWVdSZXY2bGczbncvb2FZNkpOc0t1Ywp4a2FLYXhOMDk3VlhETlk5c3lSa2thZXdkcXd5Ynhtb0FNeTJpNU5jVnNqUzJZY2ZjWExLaitUbTI5YjhSdHR0ClBJczdkTGRKUTQ5MXQyZ3k3UmlkSFM5MGR4cHl0dmYrRTRRUldJNmJPUE5LRkFyUHhscGh5MWUvSEROTGsrNzAKUDBtNTJuNWIvKzFHVnJvM2dIY1QwSGxBaVdVZi9LZndPZkhzSVJsUjh1MlpGZmRFVVJRclBiSVR6ZFJSSGo4Qgp1aVJvVCs3Nk9JUDFwb2d1RFYreGIwenhjcGc2Y240VjFyTTg5MlQybmxVWC9Zek5qZmhlZ2F6R0NzWEQyNVhUCmZ3SURBUUFCbzRHTk1JR0tNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JTZ2Q0a0NFTHpCNUU5awp0RUk5N2lxZW8yRm9aekFxQmdOVkhSRUVJekFoZ2g4cUxtUmxabUYxYkhRdWFIVmlZbXhsTFdkeWNHTXVZMmxzCmFYVnRMbWx2TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCTUNHc2J0Q3pUWEJaTUd5OC9YUERSSFpWUktKcmEKT0VOZjEyRDBnL1Y4bStsWG9JNHUyc2hFODFiMkRiaUhPUkdGS2paZzcrTXpkK0lIMGg2YSsyck5ZbkZYVld4SwpkVzlCV2tDdU9mSm5nbWJDc2lEMFY3SFN3Vy9TbnFsbUF3T1dqR084Tlk4YmFvSlV1SHZ4RXpPVmZlbXJ2MDhZCnlKeWVpZ09YZTZJMnZUWVFKQ2ZXMHJsNHZ4ZzV0YTE3WkNuSGxZamZabFMvQzAvWkVyR0p4UkhsZWxBOUx0dlgKQ0JYL3JPWGFKQmFCRi9QZlI4cktMNlV6V3JqaGM1NVNWc2JzNmwwREF6WXQ1TDdrUmFQaHdpdnlWZmczdng5cwp3SkYrSFFjcEZiVlU1ZzVxZHBLTWhvRVNkMFVpaUhNaTdlY2RoVjlwUys2N0Z3SGVXdDFMZFhrcgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBblVrVFlOOWVha2I4elFBUlhsblR5LzRVVStoS2xxbmpGcm80MHZKWkhWMHZCOVVWClQzeEVGWG9abmlKVkhGWVdSZXY2bGczbncvb2FZNkpOc0t1Y3hrYUtheE4wOTdWWEROWTlzeVJra2Fld2Rxd3kKYnhtb0FNeTJpNU5jVnNqUzJZY2ZjWExLaitUbTI5YjhSdHR0UElzN2RMZEpRNDkxdDJneTdSaWRIUzkwZHhweQp0dmYrRTRRUldJNmJPUE5LRkFyUHhscGh5MWUvSEROTGsrNzBQMG01Mm41Yi8rMUdWcm8zZ0hjVDBIbEFpV1VmCi9LZndPZkhzSVJsUjh1MlpGZmRFVVJRclBiSVR6ZFJSSGo4QnVpUm9UKzc2T0lQMXBvZ3VEVit4YjB6eGNwZzYKY240VjFyTTg5MlQybmxVWC9Zek5qZmhlZ2F6R0NzWEQyNVhUZndJREFRQUJBb0lCQUQvZXJkelh0K3BtVzBBUAo5LzJkY3BGUzR3UlR2djVCakxMcytpaEhPNExlRlR3VC9teGhwUEFudmdGbUpiTzFEYVJsT0VQNDc1VzRtVUMrClp0Z0lTRWlIMnF1eW9mdjVDcGx1NG0wOXFRMHcwRXJRa0Vablg3NjdZcUY1UExVTkpmb3BrYzRxOURETW5pYkYKdlhvMG5yNUlOK09ramo2K0llcFJpT1NZNnl3dk53NlU4ZmNoN0pnNUU1U0pYRFB5cStNN1BPc3c4ZGNyNk50bQp0L0M3N2VTaS8xdmZ6ZnA3NjNScGZibE1tSm1PTHk5TjF0cW9seklpYnlZQU9MNjluZVhrTFBuei9FQlBKeFVyClh2ckQ0K0VINVZqVkcxQU1tZjlhN0tPZ05pbnY4S0FMbFlvN0NaOW5iUEdkeWhTYnEyOThmQU5IZnRrWU5CWk8KZSs3YlFTRUNnWUVBemxYRVE1UC81cXRJUFFKeENoR25DVDk1YkFTNmVzNzExK1JKaU1mbncycE1LbEpIbURyMQpzVEtWYWk2S0dkU1ZYL2FNdEVLL1lSWXFUSmtsa3NTdVVHVW43OEJoU29FNThTRmxVRFNnaE1ic250dHQ3M2dGClY3NWhBdDFsWmExdTcxS0pNOXJ2UU80QnJEaGNvNkFCVDJWd212R0J5MVAwekxhT0J1K0NQcThDZ1lFQXd5VG4KeVg5cGhvbkhrbDdjTFZjUEp4U0xpaWNYUnpuM3pTZ1ZjR3dNSVFxSzRQT2FWZ3hYLzMxWU4xaTdyYUkyQUEyVwpreVE4am9sUXo4NXk2RlVuYm5FWExiaVV1cFUvVE8ybUErY2plRExvN0gzTk4xL29UZVM0T290VEdDRDJsSklMCnpESFdWK2tucGpuUkMyNWxMTW0xVlVXaVN5NS9VRzFudzkrcWJERUNnWUVBdWRlZUVvLzI2VGhVdEQ3Q3VhTDAKbyt1NzNZTFV3MUF0TmVxMElMS05HUUZnNEsyRE5xWEVMWG0yQWhFdzZkc0RQNCs5WTQ3SytSTVJ2alFpRjNOMgozWXArMGY2Z29vNktOWmt5dTI3ck5TeEdhejZRWWlQa0RBZTVNTzlnS0poeFZyVXNScnhteWtDVTJSMWFzeldtCmVIQ1JYNzB1Zm9oNzhQWnNMZXNEa0prQ2dZQWxoSnJycW90blNtWU1SaUNldHZZNjFVQmV0MVZLWkdLNEZ0VEkKWUgyVWZLcG14VzhPekNDL0JpSkh3YytUZW5SWFhrVnMxTEt2MU1hc3JVeDZUcVRlSHZBTjRrYjErR3ZMSm9XYwppbnZQU0Rwdi9WL1BIYWxVRUgwN0JENWRqVGpiSjVrTkVTZmNqdjhJZm1VcWhYYitQV21YazJPNGdLQUpubjhzCnNYdmFnUUtCZ1FETU1JZzcyeVR5RzNOV1E4bWF4ZlFEUURjV2YxRDJlRXlmNXNuMStpc1JBRHVwVUpuNjF5dzEKN1h0UmtkdWdJalVIdjc0QmRobDV4NU4wY3NzQ3ZCZWozZWt6L3dxSjN2czVid0hneUNrbjh2RVFoaC9QNjNRegoxZ05lMjl2RGZIZFZPMWdXVWJ4SWZNTTVTdDJDU1NlNmNrdCtCRXlncWxUVHp3bU9qcTg1TXc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: cilium
data:
  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"
  # Disable the usage of CiliumEndpoint CRD
  disable-endpoint-crd: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "true"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: default
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "0"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  tunnel: "disabled"

  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-bpf-masquerade: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "true"
  enable-local-redirect-policy: "true"
  ipv4-native-routing-cidr: 10.244.0.0/16

  kube-proxy-replacement: "strict"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-endpoint-routes: "true"
  cni-uninstall: "true"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "kubernetes"
  disable-cnp-status-updates: "true"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "false"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/sys/fs/cgroup"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  remove-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-min-ttl: "3600"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: cilium
data:
  config.yaml: |
    cluster-name: default
    peer-service: "hubble-peer.cilium.svc.cluster.local:443"
    listen-address: :4245
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: cilium
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - namespaces
      - services
      - pods
      - endpoints
      - nodes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - list
      - watch
      # This is used when validating policies in preflight. This will need to stay
      # until we figure out how to avoid "get" inside the preflight, and then
      # should be removed ideally.
      - get
  - apiGroups:
      - cilium.io
    resources:
      - ciliumloadbalancerippools
      - ciliumbgppeeringpolicies
      - ciliumclusterwideenvoyconfigs
      - ciliumclusterwidenetworkpolicies
      - ciliumegressgatewaypolicies
      - ciliumendpoints
      - ciliumendpointslices
      - ciliumenvoyconfigs
      - ciliumidentities
      - ciliumlocalredirectpolicies
      - ciliumnetworkpolicies
      - ciliumnodes
      - ciliumnodeconfigs
    verbs:
      - list
      - watch
  - apiGroups:
      - cilium.io
    resources:
      - ciliumidentities
      - ciliumendpoints
      - ciliumnodes
    verbs:
      - create
  - apiGroups:
      - cilium.io
    # To synchronize garbage collection of such resources
    resources:
      - ciliumidentities
    verbs:
      - update
  - apiGroups:
      - cilium.io
    resources:
      - ciliumendpoints
    verbs:
      - delete
      - get
  - apiGroups:
      - cilium.io
    resources:
      - ciliumnodes
      - ciliumnodes/status
    verbs:
      - get
      - update
  - apiGroups:
      - cilium.io
    resources:
      - ciliumnetworkpolicies/status
      - ciliumclusterwidenetworkpolicies/status
      - ciliumendpoints/status
      - ciliumendpoints
    verbs:
      - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
      # to automatically delete [core|kube]dns pods so that are starting to being
      # managed by Cilium
      - delete
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      # To remove node taints
      - nodes
      # To set NetworkUnavailable false on startup
      - nodes/status
    verbs:
      - patch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      # to perform LB IP allocation for BGP
      - services/status
    verbs:
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      # to check apiserver connectivity
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      # to perform the translation of a CNP that contains `ToGroup` to its endpoints
      - services
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - cilium.io
    resources:
      - ciliumnetworkpolicies
      - ciliumclusterwidenetworkpolicies
    verbs:
      # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
      - create
      - update
      - deletecollection
      # To update the status of the CNPs and CCNPs
      - patch
      - get
      - list
      - watch
  - apiGroups:
      - cilium.io
    resources:
      - ciliumnetworkpolicies/status
      - ciliumclusterwidenetworkpolicies/status
    verbs:
      # Update the auto-generated CNPs and CCNPs status.
      - patch
      - update
  - apiGroups:
      - cilium.io
    resources:
      - ciliumendpoints
      - ciliumidentities
    verbs:
      # To perform garbage collection of such resources
      - delete
      - list
      - watch
  - apiGroups:
      - cilium.io
    resources:
      - ciliumidentities
    verbs:
      # To synchronize garbage collection of such resources
      - update
  - apiGroups:
      - cilium.io
    resources:
      - ciliumnodes
    verbs:
      - create
      - update
      - get
      - list
      - watch
        # To perform CiliumNode garbage collector
      - delete
  - apiGroups:
      - cilium.io
    resources:
      - ciliumnodes/status
    verbs:
      - update
  - apiGroups:
      - cilium.io
    resources:
      - ciliumendpointslices
      - ciliumenvoyconfigs
    verbs:
      - create
      - update
      - get
      - list
      - watch
      - delete
      - patch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - create
      - get
      - list
      - watch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - update
    resourceNames:
      - ciliumloadbalancerippools.cilium.io
      - ciliumbgppeeringpolicies.cilium.io
      - ciliumclusterwideenvoyconfigs.cilium.io
      - ciliumclusterwidenetworkpolicies.cilium.io
      - ciliumegressgatewaypolicies.cilium.io
      - ciliumendpoints.cilium.io
      - ciliumendpointslices.cilium.io
      - ciliumenvoyconfigs.cilium.io
      - ciliumexternalworkloads.cilium.io
      - ciliumidentities.cilium.io
      - ciliumlocalredirectpolicies.cilium.io
      - ciliumnetworkpolicies.cilium.io
      - ciliumnodes.cilium.io
      - ciliumnodeconfigs.cilium.io
  - apiGroups:
      - cilium.io
    resources:
      - ciliumloadbalancerippools
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - cilium.io
    resources:
      - ciliumloadbalancerippools/status
    verbs:
      - patch
  # For cilium-operator running in HA mode.
  #
  # Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
  # between multiple running instances.
  # The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
  # common and fewer objects in the cluster watch "all Leases".
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
      - get
      - update
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - componentstatuses
      - endpoints
      - namespaces
      - nodes
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - cilium.io
    resources:
      - "*"
    verbs:
      - get
      - list
      - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: cilium
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
  - kind: ServiceAccount
    name: "cilium-operator"
    namespace: cilium
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
  - kind: ServiceAccount
    name: "hubble-ui"
    namespace: cilium
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: cilium
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: cilium
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
    - protocol: TCP
      port: 80
      targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: cilium
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: cilium
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
    - name: peer-service
      port: 443
      protocol: TCP
      targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: cilium
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # ensure pods roll when configmap updates
        cilium.io/cilium-configmap-checksum: "9e4969dee000741ba3274b45426a9e60a7b6632e96f5959316ce63eb189307d4"
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
        - name: cilium-agent
          image: "quay.io/cilium/cilium:v1.13.2@sha256:85708b11d45647c35b9288e0de0706d24a5ce8a378166cadc700f756cc1a38d6"
          imagePullPolicy: IfNotPresent
          command:
            - cilium-agent
          args:
            - --config-dir=/tmp/cilium/config-map
          startupProbe:
            httpGet:
              host: "127.0.0.1"
              path: /healthz
              port: 9879
              scheme: HTTP
              httpHeaders:
                - name: "brief"
                  value: "true"
            failureThreshold: 105
            periodSeconds: 2
            successThreshold: 1
          livenessProbe:
            httpGet:
              host: "127.0.0.1"
              path: /healthz
              port: 9879
              scheme: HTTP
              httpHeaders:
                - name: "brief"
                  value: "true"
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              host: "127.0.0.1"
              path: /healthz
              port: 9879
              scheme: HTTP
              httpHeaders:
                - name: "brief"
                  value: "true"
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 5
          env:
            - name: K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: CILIUM_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: CILIUM_CLUSTERMESH_CONFIG
              value: /var/lib/cilium/clustermesh/
            - name: CILIUM_CNI_CHAINING_MODE
              valueFrom:
                configMapKeyRef:
                  name: cilium-config
                  key: cni-chaining-mode
                  optional: true
            - name: CILIUM_CUSTOM_CNI_CONF
              valueFrom:
                configMapKeyRef:
                  name: cilium-config
                  key: custom-cni-conf
                  optional: true
            - name: KUBERNETES_SERVICE_HOST
              value: "localhost"
            - name: KUBERNETES_SERVICE_PORT
              value: "7445"
          lifecycle:
            postStart:
              exec:
                command:
                  - "bash"
                  - "-c"
                  - |
                    /cni-install.sh --enable-debug=false --cni-exclusive=true --log-file=/var/run/cilium/cilium-cni.log
            preStop:
              exec:
                command:
                  - /cni-uninstall.sh
          securityContext:
            seLinuxOptions:
              level: s0
              type: spc_t
            capabilities:
              add:
                - CHOWN
                - KILL
                - NET_ADMIN
                - NET_RAW
                - IPC_LOCK
                - SYS_ADMIN
                - SYS_RESOURCE
                - DAC_OVERRIDE
                - FOWNER
                - SETGID
                - SETUID
              drop:
                - ALL
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            # Unprivileged containers need to mount /proc/sys/net from the host
            # to have write access
            - mountPath: /host/proc/sys/net
              name: host-proc-sys-net
            # Unprivileged containers need to mount /proc/sys/kernel from the host
            # to have write access
            - mountPath: /host/proc/sys/kernel
              name: host-proc-sys-kernel
            - name: bpf-maps
              mountPath: /sys/fs/bpf
              # Unprivileged containers can't set mount propagation to bidirectional
              # in this case we will mount the bpf fs from an init container that
              # is privileged and set the mount propagation from host to container
              # in Cilium.
              mountPropagation: HostToContainer
            # Check for duplicate mounts before mounting
            - name: cilium-cgroup
              mountPath: /sys/fs/cgroup
            - name: cilium-run
              mountPath: /var/run/cilium
            - name: etc-cni-netd
              mountPath: /host/etc/cni/net.d
            - name: clustermesh-secrets
              mountPath: /var/lib/cilium/clustermesh
              readOnly: true
              # Needed to be able to load kernel modules
            - name: lib-modules
              mountPath: /lib/modules
              readOnly: true
            - name: xtables-lock
              mountPath: /run/xtables.lock
            - name: hubble-tls
              mountPath: /var/lib/cilium/tls/hubble
              readOnly: true
            - name: tmp
              mountPath: /tmp
      initContainers:
        - name: config
          image: "quay.io/cilium/cilium:v1.13.2@sha256:85708b11d45647c35b9288e0de0706d24a5ce8a378166cadc700f756cc1a38d6"
          imagePullPolicy: IfNotPresent
          command:
            - cilium
            - build-config
          env:
            - name: K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: CILIUM_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: KUBERNETES_SERVICE_HOST
              value: "localhost"
            - name: KUBERNETES_SERVICE_PORT
              value: "7445"
          volumeMounts:
            - name: tmp
              mountPath: /tmp
          terminationMessagePolicy: FallbackToLogsOnError
        # Mount the bpf fs if it is not mounted. We will perform this task
        # from a privileged container because the mount propagation bidirectional
        # only works from privileged containers.
        - name: mount-bpf-fs
          image: "quay.io/cilium/cilium:v1.13.2@sha256:85708b11d45647c35b9288e0de0706d24a5ce8a378166cadc700f756cc1a38d6"
          imagePullPolicy: IfNotPresent
          args:
            - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
          command:
            - /bin/bash
            - -c
            - --
          terminationMessagePolicy: FallbackToLogsOnError
          securityContext:
            privileged: true
          volumeMounts:
            - name: bpf-maps
              mountPath: /sys/fs/bpf
              mountPropagation: Bidirectional
        - name: clean-cilium-state
          image: "quay.io/cilium/cilium:v1.13.2@sha256:85708b11d45647c35b9288e0de0706d24a5ce8a378166cadc700f756cc1a38d6"
          imagePullPolicy: IfNotPresent
          command:
            - /init-container.sh
          env:
            - name: CILIUM_ALL_STATE
              valueFrom:
                configMapKeyRef:
                  name: cilium-config
                  key: clean-cilium-state
                  optional: true
            - name: CILIUM_BPF_STATE
              valueFrom:
                configMapKeyRef:
                  name: cilium-config
                  key: clean-cilium-bpf-state
                  optional: true
            - name: KUBERNETES_SERVICE_HOST
              value: "localhost"
            - name: KUBERNETES_SERVICE_PORT
              value: "7445"
          terminationMessagePolicy: FallbackToLogsOnError
          securityContext:
            seLinuxOptions:
              level: s0
              type: spc_t
            capabilities:
              add:
                - NET_ADMIN
                - SYS_ADMIN
                - SYS_RESOURCE
              drop:
                - ALL
          volumeMounts:
            - name: bpf-maps
              mountPath: /sys/fs/bpf
              # Required to mount cgroup filesystem from the host to cilium agent pod
            - name: cilium-cgroup
              mountPath: /sys/fs/cgroup
              mountPropagation: HostToContainer
            - name: cilium-run
              mountPath: /var/run/cilium
          resources:
            requests:
              cpu: 100m
              memory: 100Mi # wait-for-kube-proxy
        # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
        - name: install-cni-binaries
          image: "quay.io/cilium/cilium:v1.13.2@sha256:85708b11d45647c35b9288e0de0706d24a5ce8a378166cadc700f756cc1a38d6"
          imagePullPolicy: IfNotPresent
          command:
            - "/install-plugin.sh"
          resources:
            requests:
              cpu: 100m
              memory: 10Mi
          securityContext:
            seLinuxOptions:
              level: s0
              type: spc_t
            capabilities:
              drop:
                - ALL
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - name: cni-path
              mountPath: /host/opt/cni/bin
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  k8s-app: cilium
              topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
        - name: tmp
          emptyDir: {}
          # To keep state between restarts / upgrades
        - name: cilium-run
          hostPath:
            path: /var/run/cilium
            type: DirectoryOrCreate
          # To keep state between restarts / upgrades for bpf maps
        - name: bpf-maps
          hostPath:
            path: /sys/fs/bpf
            type: DirectoryOrCreate
        # To keep state between restarts / upgrades for cgroup2 filesystem
        - name: cilium-cgroup
          hostPath:
            path: /sys/fs/cgroup
            type: DirectoryOrCreate
        # To install cilium cni plugin in the host
        - name: cni-path
          hostPath:
            path: /opt/cni/bin
            type: DirectoryOrCreate
          # To install cilium cni configuration in the host
        - name: etc-cni-netd
          hostPath:
            path: /etc/cni/net.d
            type: DirectoryOrCreate
          # To be able to load kernel modules
        - name: lib-modules
          hostPath:
            path: /lib/modules
          # To access iptables concurrently with other processes (e.g. kube-proxy)
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          # To read the clustermesh configuration
        - name: clustermesh-secrets
          secret:
            secretName: cilium-clustermesh
            # note: the leading zero means this number is in octal representation: do not remove it
            defaultMode: 0400
            optional: true
        - name: host-proc-sys-net
          hostPath:
            path: /proc/sys/net
            type: Directory
        - name: host-proc-sys-kernel
          hostPath:
            path: /proc/sys/kernel
            type: Directory
        - name: hubble-tls
          projected:
            # note: the leading zero means this number is in octal representation: do not remove it
            defaultMode: 0400
            sources:
              - secret:
                  name: hubble-server-certs
                  optional: true
                  items:
                    - key: ca.crt
                      path: client-ca.crt
                    - key: tls.crt
                      path: server.crt
                    - key: tls.key
                      path: server.key
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: cilium
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 2
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # ensure pods roll when configmap updates
        cilium.io/cilium-configmap-checksum: "9e4969dee000741ba3274b45426a9e60a7b6632e96f5959316ce63eb189307d4"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
        - name: cilium-operator
          image: "quay.io/cilium/operator-generic:v1.13.2@sha256:a1982c0a22297aaac3563e428c330e17668305a41865a842dec53d241c5490ab"
          imagePullPolicy: IfNotPresent
          command:
            - cilium-operator-generic
          args:
            - --config-dir=/tmp/cilium/config-map
            - --debug=$(CILIUM_DEBUG)
          env:
            - name: K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: CILIUM_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: CILIUM_DEBUG
              valueFrom:
                configMapKeyRef:
                  key: debug
                  name: cilium-config
                  optional: true
            - name: KUBERNETES_SERVICE_HOST
              value: "localhost"
            - name: KUBERNETES_SERVICE_PORT
              value: "7445"
          livenessProbe:
            httpGet:
              host: "127.0.0.1"
              path: /healthz
              port: 9234
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 3
          volumeMounts:
            - name: cilium-config-path
              mountPath: /tmp/cilium/config-map
              readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  io.cilium/app: operator
              topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
        - name: cilium-config-path
          configMap:
            name: cilium-config
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: cilium
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
        - name: hubble-relay
          image: "quay.io/cilium/hubble-relay:v1.13.2@sha256:51b772cab0724511583c3da3286439791dc67d7c35077fa30eaba3b5d555f8f4"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
            - name: config
              mountPath: /etc/hubble-relay
              readOnly: true
            - name: tls
              mountPath: /var/lib/hubble-relay/tls
              readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName:
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  k8s-app: cilium
              topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
        - name: config
          configMap:
            name: hubble-relay-config
            items:
              - key: config.yaml
                path: config.yaml
        - name: tls
          projected:
            # note: the leading zero means this number is in octal representation: do not remove it
            defaultMode: 0400
            sources:
              - secret:
                  name: hubble-relay-client-certs
                  items:
                    - key: ca.crt
                      path: hubble-server-ca.crt
                    - key: tls.crt
                      path: client.crt
                    - key: tls.key
                      path: client.key
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: cilium
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName:
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
        - name: frontend
          image: "quay.io/cilium/hubble-ui:v0.11.0@sha256:bcb369c47cada2d4257d63d3749f7f87c91dde32e010b223597306de95d1ecc8"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8081
          volumeMounts:
            - name: hubble-ui-nginx-conf
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: nginx.conf
            - name: tmp-dir
              mountPath: /tmp
          terminationMessagePolicy: FallbackToLogsOnError
        - name: backend
          image: "quay.io/cilium/hubble-ui-backend:v0.11.0@sha256:14c04d11f78da5c363f88592abae8d2ecee3cbe009f443ef11df6ac5f692d839"
          imagePullPolicy: IfNotPresent
          env:
            - name: EVENTS_SERVER_PORT
              value: "8090"
            - name: FLOWS_API_ADDR
              value: "hubble-relay:80"
          ports:
            - name: grpc
              containerPort: 8090
          volumeMounts:
          terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
        - configMap:
            defaultMode: 420
            name: hubble-ui-nginx
          name: hubble-ui-nginx-conf
        - emptyDir: {}
          name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.
