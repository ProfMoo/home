---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'
# Taskfile used to manage certain VolSync tasks for a given application, limitations are as followed.
#   1. Fluxtomization, HelmRelease, PVC, ReplicationSource all have the same name (e.g. plex)
#   2. ReplicationSource and ReplicationDestination are a Restic repository
#   3. Each application only has one PVC that is being replicated
vars:
  VOLSYNC_RESOURCES_DIR: '{{.ROOT_DIR}}/.taskfiles/volsync/resources'
  MINIJINGA_CONFIG_FILE: '{{.ROOT_DIR}}/.minijinja.toml'
tasks:
  state-*:
    desc: Suspend or resume Volsync
    cmds:
      - flux --namespace volsync-system {{.STATE}} kustomization volsync
      - flux --namespace volsync-system {{.STATE}} helmrelease volsync
      - kubectl --namespacce volsync-system scale deployment volsync --replicas {{if eq .STATE "suspend"}}0{{else}}1{{end}}
    vars:
      STATE: '{{index .MATCH 0}}'
    preconditions:
      - '[[ "{{.STATE}}" == "suspend" || "{{.STATE}}" == "resume" ]]'
      - which flux kubectl
  unlock:
    desc: Unlock all restic source repos
    cmds:
      - for: {var: SOURCES, split: "\n"}
        cmd: kubectl --namespace {{splitList "," .ITEM | first}} patch --field-manager=flux-client-side-apply replicationsources {{splitList "," .ITEM | last}} --type merge --patch "{\"spec\":{\"restic\":{\"unlock\":\"{{now | unixEpoch}}\"}}}"
    vars:
      SOURCES:
        sh: kubectl get replicationsources --all-namespaces --no-headers --output=jsonpath='{range .items[*]}{.metadata.namespace},{.metadata.name}{"\n"}{end}'
    preconditions:
      - which kubectl
  snapshot:
    desc: Snapshot an app [NS=default] [APP=required]
    cmds:
      - kubectl --namespace {{.NS}} patch replicationsources {{.APP}} --type merge -p '{"spec":{"trigger":{"manual":"{{now | unixEpoch}}"}}}'
      - until kubectl --namespace {{.NS}} get job/{{.JOB}} &>/dev/null; do sleep 5; done
      - kubectl --namespace {{.NS}} wait job/{{.JOB}} --for=condition=complete --timeout=120m
    vars:
      NS: '{{.NS | default "default"}}'
      JOB: volsync-src-{{.APP}}
    requires:
      vars: [APP]
    preconditions:
      - kubectl --namespace {{.NS}} get replicationsources {{.APP}}
      - which kubectl
  restore:
    desc: Restore an app [NS=default] [APP=required] [PREVIOUS=required]
    cmds:
      # Suspend
      - flux --namespace {{.NS}} suspend kustomization {{.APP}}
      - flux --namespace {{.NS}} suspend helmrelease {{.APP}}
      - kubectl --namespace {{.NS}} scale {{.CONTROLLER}}/{{.APP}} --replicas 0
      - kubectl --namespace {{.NS}} wait pod --for=delete --selector="app.kubernetes.io/name={{.APP}}" --timeout=5m
      # Restore
      - minijinja-cli --config-file={{.MINIJINGA_CONFIG_FILE}} {{.VOLSYNC_RESOURCES_DIR}}/replicationdestination.yaml.j2 | kubectl apply --server-side --filename -
      - until kubectl --namespace {{.NS}} get job/volsync-dst-{{.APP}}-manual &>/dev/null; do sleep 5; done
      - kubectl --namespace {{.NS}} wait job/volsync-dst-{{.APP}}-manual --for=condition=complete --timeout=120m
      - kubectl --namespace {{.NS}} delete replicationdestination {{.APP}}-manual
      # Resume
      - flux --namespace {{.NS}} resume kustomization {{.APP}}
      - flux --namespace {{.NS}} resume helmrelease {{.APP}}
      - flux --namespace {{.NS}} reconcile helmrelease {{.APP}} --force
      - kubectl --namespace {{.NS}} wait pod --for=condition=ready --selector="app.kubernetes.io/name={{.APP}}" --timeout=5m
    vars:
      NS: '{{.NS | default "default"}}'
      CONTROLLER:
        sh: kubectl --namespace {{.NS}} get deployment {{.APP}} &>/dev/null && echo deployment || echo statefulset
    env:
      NS: '{{.NS}}'
      APP: '{{.APP}}'
      PREVIOUS: '{{.PREVIOUS}}'
      CLAIM:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath='{.spec.sourcePVC}'
      ACCESS_MODES:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath='{.spec.restic.accessModes}'
      STORAGE_CLASS_NAME:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath='{.spec.restic.storageClassName}'
      PUID:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath='{.spec.restic.moverSecurityContext.runAsUser}'
      PGID:
        sh: kubectl --namespace {{.NS}} get replicationsources/{{.APP}} --output=jsonpath='{.spec.restic.moverSecurityContext.runAsGroup}'
    requires:
      vars: [APP, PREVIOUS]
    preconditions:
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/replicationdestination.yaml.j2
      - which flux kubectl minijinja-cli
  list-local-snapshots:
    desc: List restic snapshots for an app [NS=default] [APP=required]
    vars:
      NS: '{{.NS | default "media"}}'
      RESTIC_PASSWORD:
        sh: kubectl --namespace {{.NS}} get secret {{.APP}}-volsync-secret -o jsonpath='{.data.RESTIC_PASSWORD}' | base64 -d
      RESTIC_REPOSITORY: '/repository/{{.APP}}'
    env:
      NS: '{{.NS}}'
      APP: '{{.APP}}'
      RESTIC_PASSWORD: '{{.RESTIC_PASSWORD}}'
      RESTIC_REPOSITORY: '{{.RESTIC_REPOSITORY}}'
    cmds:
      - |
        # Set up cleanup trap
        cleanup() {
          echo "Cleaning up pod restic-list-{{.APP}}-local..."
          kubectl --namespace {{.NS}} delete pod restic-list-{{.APP}}-local --ignore-not-found=true 2>/dev/null || true
        }
        trap cleanup EXIT

        # Create and run the pod
        minijinja-cli --config-file={{.MINIJINGA_CONFIG_FILE}} {{.VOLSYNC_RESOURCES_DIR}}/restic-list-local-snapshots.yaml.j2 | kubectl apply --server-side --filename -

        # Wait for pod to start and begin showing logs immediately
        echo "Waiting for pod to start..."
        sleep 5

        # Follow logs until pod completes
        kubectl --namespace {{.NS}} logs -f restic-list-{{.APP}}-local

        # Wait for pod to finish completely
        kubectl --namespace {{.NS}} wait pod/restic-list-{{.APP}}-local --for=condition=Ready=false --timeout=300s || true
    requires:
      vars: [APP]
    preconditions:
      - kubectl --namespace {{.NS}} get secret {{.APP}}-volsync-secret
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/restic-list-local-snapshots.yaml.j2
  repo-stats:
    desc: Show restic repository stats for an app [NS=default] [APP=required]
    vars:
      NS: '{{.NS | default "media"}}'
      RESTIC_PASSWORD:
        sh: kubectl --namespace {{.NS}} get secret {{.APP}}-volsync-secret -o jsonpath='{.data.RESTIC_PASSWORD}' | base64 -d
      RESTIC_REPOSITORY: '/repository/{{.APP}}'
    env:
      NS: '{{.NS}}'
      APP: '{{.APP}}'
      RESTIC_PASSWORD: '{{.RESTIC_PASSWORD}}'
      RESTIC_REPOSITORY: '{{.RESTIC_REPOSITORY}}'
    cmds:
      - |
        minijinja-cli --config-file={{.MINIJINGA_CONFIG_FILE}} {{.VOLSYNC_RESOURCES_DIR}}/restic-stats.yaml.j2 | kubectl apply --server-side --filename -

        echo "Waiting for pod to start..."
        sleep 5

        kubectl --namespace {{.NS}} logs -f restic-stats-{{.APP}}-local

        kubectl --namespace {{.NS}} delete pod restic-stats-{{.APP}}-local
    requires:
      vars: [APP]
    preconditions:
      - kubectl --namespace {{.NS}} get secret {{.APP}}-volsync-secret
      - test -f {{.VOLSYNC_RESOURCES_DIR}}/restic-stats.yaml.j2
  list-all-snapshots:
    desc: List snapshots for all apps in a namespace [NS=default]
    cmds:
      - |
        echo "=== VolSync Backup Overview ==="
        echo ""
        for app in $(kubectl --namespace {{.NS}} get replicationsources -o jsonpath='{.items[*].metadata.name}' | tr ' ' '\n' | sort); do
          echo "📦 App: $app"
          echo "  Local Repository:"

          # Try to get snapshots directly, with better error handling
          if kubectl --namespace {{.NS}} get secret ${app}-volsync-secret >/dev/null 2>&1; then
            task volsync:list-local-snapshots NS={{.NS}} APP=$app 2>/dev/null || echo "    ❌ Error accessing local repository"
          else
            echo "    ❌ No local secret found"
          fi
          echo ""
        done
    vars:
      NS: '{{.NS | default "media"}}'
    preconditions:
      - which kubectl
  cleanup-restic-pod:
    desc: Cleanup restic pod for an app
    internal: true
    cmds:
      - kubectl --namespace {{.NS}} delete pod restic-list-{{.APP}}-local --ignore-not-found=true 2>/dev/null || true
    vars:
      NS: '{{.NS | default "media"}}'
