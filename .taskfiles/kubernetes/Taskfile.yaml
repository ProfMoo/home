---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'
tasks:
  browse-pvc:
    desc: Mount a PVC to an temp container [NS=default] [CLAIM=required]
    interactive: true
    cmd: kubectl browse-pvc --namespace {{.NS}} --image docker.io/library/alpine:latest {{.CLAIM}}
    vars:
      NS: '{{.NS | default "default"}}'
    requires:
      vars: [CLAIM]
    preconditions:
      - kubectl --namespace {{.NS}} get persistentvolumeclaims {{.CLAIM}}
      - kubectl browse-pvc --version
      - which kubectl
  node-shell:
    desc: Open a shell to a node [NODE=required]
    interactive: true
    cmd: kubectl node-shell -n kube-system -x {{.NODE}}
    requires:
      vars: [NODE]
    preconditions:
      - kubectl get nodes {{.NODE}}
      - kubectl node-shell --version
      - which kubectl
  reset-pvc:
    desc: Scale down deployment, delete PVC, and make PV available [NS=default] [DEPLOY=required] [CLAIM=required]
    cmd: |
      echo "==> Scaling down deployment {{.DEPLOY}}..."
      kubectl scale deployment {{.DEPLOY}} --replicas=0 --namespace {{.NS}}

      echo "==> Waiting for pods to terminate..."
      kubectl wait --for=delete --namespace {{.NS}} pods --selector=app={{.DEPLOY}} --timeout=60s

      echo "==> Deleting PVC {{.CLAIM}}..."
      kubectl delete pvc {{.CLAIM}} --namespace {{.NS}}

      echo "==> Patching PV to make it available..."
      PV=$(kubectl get pv -o json | jq -r '.items[] | select(.spec.claimRef.name == "{{.CLAIM}}") | .metadata.name')
      kubectl patch pv $PV -p '{"spec":{"claimRef": null}}'

      echo "==> Scaling up deployment {{.DEPLOY}}..."
      kubectl scale deployment {{.DEPLOY}} --replicas=1 --namespace {{.NS}}

      echo "==> Waiting for pod to be ready..."
      kubectl wait --for=condition=available --namespace {{.NS}} deployment/{{.DEPLOY}} --timeout=300s
    requires:
      vars: [NS, DEPLOY, CLAIM]
  delete-error-pods:
    desc: Delete all pods in Error state [NS=all]
    cmd: |
      if [ "{{.NS}}" = "all" ]; then
        echo "==> Deleting Error pods across all namespaces..."
        kubectl get pods --all-namespaces | grep Error | awk '{print "-n "$1, $2}' | xargs -L1 kubectl delete pod
      else
        echo "==> Deleting Error pods in namespace {{.NS}}..."
        kubectl get pods -n {{.NS}} | grep Error | awk '{print $1}' | xargs -L1 kubectl delete pod -n {{.NS}}
      fi
    vars:
      NS: '{{.NS | default "all"}}'
  delete-csu-pods:
    desc: Delete all pods in ContainerStatusUnknown state [NS=all]
    cmd: |
      if [ "{{.NS}}" = "all" ]; then
        echo "==> Deleting ContainerStatusUnknown pods across all namespaces..."
        kubectl get pods --all-namespaces | grep ContainerStatusUnknown | awk '{print "-n "$1, $2}' | xargs -L1 kubectl delete pod
      else
        echo "==> Deleting ContainerStatusUnknown pods in namespace {{.NS}}..."
        kubectl get pods -n {{.NS}} | grep ContainerStatusUnknown | awk '{print $1}' | xargs -L1 kubectl delete pod -n {{.NS}}
      fi
    vars:
      NS: '{{.NS | default "all"}}'
